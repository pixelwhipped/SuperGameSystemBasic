REM  _______  _        _______  _        _______
REM (  ____ \( (    /|(  ___  )| \    /\(  ____ \
REM | (    \/|  \  ( || (   ) ||  \  / /| (    \/
REM | (_____ |   \ | || (___) ||  (_/ / | (__
REM (_____  )| (\ \) ||  ___  ||   _ (  |  __)
REM       ) || | \   || (   ) ||  ( \ \ | (
REM /\____) || )  \  || )   ( ||  /  \ \| (____/\
REM \_______)|/    )_)|/     \||_/    \/(_______/

REM The snake splash screen
DIM splash = {}
REM The new glyphs for the snake head we can flip so we only need 2
ARRAY verticalHead = {0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
ARRAY horizontalHead = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

REM Level Segments the Glyph Height matches the
REM screen hight but we need 4 to represent the Width
REM of the arena 4x20=80
REM we could randomize but this shows how glyphs can
REM be used as levels
ARRAY lPat1 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
ARRAY lPat2 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
ARRAY lPat3 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
ARRAY lPat4 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
ARRAY lPat5 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
REM these are the actual levels each 4 numbers will
REM represent 1 level
ARRAY levels = {0,0,0,0,1,0,0,1,0,2,3,0,0,4,4,0}
ARRAY levelEnemies = {5,5,5,5}

ARRAY s0 = lPat1
ARRAY s1 = lPat1
ARRAY s2 = lPat1
ARRAY s3 = lPat1

REM Do a quick test
LET levelCount = LEN(levels) / 4
IF NOT LEN(levelEnemies) = levelCount THEN
  PRINT("ERROR Level size")
  BLIT
  READTO
  END
ENDIF

REM Setup the new snake head glyphs
LET HeadUDGlyph = @NOTUSED2
LET HeadLRGlyph = @NOTUSED3
GLYPHSET(HeadUDGlyph,verticalHead)
GLYPHSET(HeadLRGlyph ,horizontalHead)

REM define the maximum length possible
REM plus the starting 3 segments
LET maxLength = SUM(levelEnemies)+3
ARRAY xCords = maxLength
ARRAY yCords = maxLength


REM define up,down,left right to match keys
LET UP = @KEYUP
LET LEFT = @KEYLEFT
LET DOWN = @KEYDOWN
LET RIGHT = @KEYRIGHT

LET gameState = -1

LET fadeRotator = TRUE
LET blue = RGBDACGET(1)

YEILD(200)
WHILE NOT KEYPRESSED(@KEYESC) OR gameState = 0
  CLEAR(@GREEN)
  FILL(0,0,80,splash)
  CURSORXY(2,2)
  PRINT("Press any key to Play")
  CURSORXY(2,3)
  PRINT("ESC to exit")
  REM allow screen to refresh if esc was pressed
  IF gameState = 0 THEN
    gameState = -1
    YEILD(200)
  ELSEIF KEYPRESSED() THEN
    gameState = 0
    LET lives = 3
    LET score = 0
    LET level = 0
    LET levelScore = 0
    LET difficulty = 100
    REM we need the bug TO reset itself at the start
    LET bugX = -1
    LET bugY = -1

    REM initialize the snake
    FOR i = 0 TO maxLength-1
      xCords[i]=-1
      yCords[i]=-1
    NEXT i
    LET nextX = GETCOLUMNS()/2
    LET nextY = GETROWS()/2
    xCords[0] = nextX
    yCords[0] = nextY
    xCords[1] = nextX
    yCords[1] = nextY + 1
    xCords[2] = nextX
    yCords[2] = nextY + 2
    currentDir = UP

    s0 = lPat1
    s1 = lPat1
    s2 = lPat1
    s3 = lPat1
  ENDIF

  REM start the main game loop
  WHILE (NOT KEYPRESSED(@KEYESC)) AND gameState = 0
    LET flip = FALSE
    REM we are modifying the green componetent TO lighten
    REM the blue component TO a cyan color AND back again
    IF fadeRotator THEN
      blue[1] = blue[1]+4
      IF blue[1] > 198 THEN
        fadeRotator = FALSE
      ENDIF
    ELSE
      blue[1] = blue[1] - 4
      IF blue[1] < 58 THEN
        fadeRotator = TRUE
      ENDIF
    ENDIF
    RGBDACSET(1,blue[0],blue[1],blue[2])

    REM check IF bug needs TO be reset
    IF bugX = -1 OR bugY = -1 THEN
      bugX = RAND(4,GETCOLUMNS()-5)
      bugY = RAND(4,GETROWS()-5)
      REM place and check were putting the bug in a usable spot
      LET test = TRUE
      WHILE test
        test = FALSE
        FOR i = 1 TO maxLength-1
          IF xCords[i] >= 0 THEN
            IF xCords[i] = bugX AND yCords[i] = bugY THEN
              test = TRUE
              bugX = RAND(4,GETCOLUMNS()-5)
              bugY = RAND(4,GETROWS()-5)
            ENDIF
          ENDIF
        NEXT i
        IF NOT test THEN
          FOR y = 0 TO 23
            FOR x = 0 TO 19
              IF s0[(y*20)+x] = 1 THEN
                IF x = bugX AND y = bugY THEN
                  test = TRUE
                  bugX = RAND(4,GETCOLUMNS()-5)
                  bugY = RAND(4,GETROWS()-5)
                ENDIF
              ENDIF
              IF s1[(y*20)+x] = 1 THEN
                IF x + 0 = bugX AND y = bugY THEN
                  test = TRUE
                  bugX = RAND(4,GETCOLUMNS()-5)
                  bugY = RAND(4,GETROWS()-5)
                ENDIF
              ENDIF
              IF s2[(y*20)+x] = 1 THEN
                IF x + 40 = bugX AND y = bugY THEN
                  test = TRUE
                  bugX = RAND(4,GETCOLUMNS()-5)
                  bugY = RAND(4,GETROWS()-5)
                ENDIF
              ENDIF
              IF s3[(y*20)+x] = 1 THEN
                IF x + 60 = bugX AND y = bugY THEN
                  test = TRUE
                  bugX = RAND(4,GETCOLUMNS()-5)
                  bugY = RAND(4,GETROWS()-5)
                ENDIF
              ENDIF
            NEXT x
          NEXT y
        ENDIF
      WEND
    ENDIF

    LET currentLen = 0
    FOR i = 0 TO maxLength-1
      IF xCords[i] >= 0 THEN
        currentLen = currentLen + 1
      ENDIF
    NEXT i

    REM update the snake
    IF KEYPRESSED(UP) AND (NOT currentDir = DOWN) THEN
      currentDir = UP
    ELSEIF KEYPRESSED(DOWN) AND (NOT currentDir = UP) THEN
      currentDir = DOWN
    ELSEIF KEYPRESSED(LEFT) AND (NOT currentDir = RIGHT) THEN
      currentDir = LEFT
    ELSEIF KEYPRESSED(RIGHT) AND (NOT currentDir = LEFT) THEN
      currentDir = RIGHT
    ENDIF

    IF currentDir = UP THEN
      nextY = nextY - 1
    ELSEIF currentDir = DOWN THEN
      nextY = nextY + 1
    ELSEIF currentDir = LEFT THEN
      nextX = nextX - 1
    ELSEIF currentDir = RIGHT THEN
      nextX = nextX + 1
    ENDIF

    REM check collision with self and update
    FOR j = currentLen-2 TO 0
      xCords[j+1] = xCords[j]
      yCords[j+1] = yCords[j]
      IF xCords[j] = nextX AND yCords[j] = nextY OR nextX < 2 OR nextX > GETCOLUMNS()-2 OR nextY < 1 OR nextY > GETROWS()-2 THEN
        gameState = 1
      ENDIF
    NEXT j
    xCords[0] = nextX
    yCords[0] = nextY

    REM check IF the snake has collided with the bug
    IF bugX = nextX AND bugY = nextY AND gameState = 0 THEN
      SOUND(400,16384,300)
      bugX=-1
      bugY=-1
      score = score + 1
      IF score > 0 AND score % 5 = 0 THEN
        lives = lives + 1
      ENDIF
      IF currentLen + 1 < maxLength THEN
        REM currentLen = currentLen + 1
        xCords[currentLen] = xCords[currentLen-1]
        yCords[currentLen] = yCords[currentLen-1]
        difficulty = MAX(difficulty-5,1)
        currentLen = currentLen + 1
      ENDIF
      IF levelScore = levelEnemies[level] THEN
        levelScore = 0
        level = level + 1
        IF level >= levelCount THEN
          level = 0
        ENDIF
        REM update the level
        LET ls0 = levels[level * 4]
        LET ls1 = levels[(level * 4) +1]
        LET ls2 = levels[(level * 4) +2]
        LET ls3 = levels[(level * 4) +3]

        REM this whole section could randomized
        IF ls0 = 0 THEN
          s0 = lPat1
        ENDIF
        IF ls0 = 1 THEN
          s0 = lPat2
        ENDIF
        IF ls0 = 2 THEN
          s0 = lPat3
        ENDIF
        IF ls0 = 3 THEN
          s0 = lPat4
        ENDIF
        IF ls0 = 4 THEN
          s0 = lPat4
        ENDIF
        IF ls1 = 0 THEN
          s1 = lPat1
        ENDIF
        IF ls1 = 1 THEN
          s1 = lPat2
        ENDIF
        IF ls1 = 2 THEN
          s1 = lPat3
        ENDIF
        IF ls1 = 3 THEN
          s1 = lPat4
        ENDIF
        IF ls1 = 4 THEN
          s1 = lPat5
        ENDIF
        IF ls2 = 0 THEN
          s2 = lPat1
        ENDIF
        IF ls2 = 1 THEN
          s2 = lPat2
        ENDIF
        IF ls2 = 2 THEN
          s2 = lPat3
        ENDIF
        IF ls2 = 3 THEN
          s2 = lPat4
        ENDIF
        IF ls2 = 4 THEN
          s2 = lPat5
        ENDIF
        IF ls3 = 0 THEN
          s3 = lPat1
        ENDIF
        IF ls3 = 1 THEN
          s3 = lPat2
        ENDIF
        IF ls3 = 2 THEN
          s3 = lPat3
        ENDIF
        IF ls3 = 3 THEN
          s3 = lPat4
        ENDIF
        IF ls3 = 4 THEN
          s3 = lPat5
        ENDIF
      ELSE
        levelScore = levelScore + 1
      ENDIF
    ENDIF

    REM draw the background
    FILL(0,0,GETCOLUMNS(),GETROWS(),@BROWN,TRUE)
    RECT(0,0,GETCOLUMNS(),GETROWS(), @RED,TRUE)

    REM draw the animated bug
    IF bugX > 0 THEN
      CURSORXY(bugX,bugY)
      IF flip THEN
        PRINTG(@ALIEN1,@BLUE,@BROWN)
      ELSE
        PRINTG(@ALIEN2,@BLUE,@BROWN)
      ENDIF
    ENDIF

    REM draw the level AND check collision
    FOR y = 0 TO 23
      FOR x = 0 TO 19
        IF s0[(y*20)+x] = 1 THEN
          IF nextX = x AND nextY = y THEN
            gameState = 1
          ENDIF
          CURSORXY(x,y)
          PRINTG(@SOLIDFILL,@RED)
        ENDIF
        IF s1[(y*20)+x] = 1 THEN
          IF nextX = x+20 AND nextY = y THEN
            gameState = 1
          ENDIF
          CURSORXY(x+20,y)
          PRINTG(@SOLIDFILL,@RED)
        ENDIF
        IF s2[(y*20)+x] = 1 THEN
          IF nextX = x + 40 AND nextY = y THEN
            gameState = 1
          ENDIF
          CURSORXY(x+40,y)
          PRINTG(@SOLIDFILL,@RED)
        ENDIF
        IF s3[(y*20)+x] = 1 THEN
          IF nextX = x + 60 AND nextY = y THEN
            gameState = 1
          ENDIF
          CURSORXY(x+60,y)
          PRINTG(@SOLIDFILL,@RED)
        ENDIF
      NEXT x
    NEXT y


    REM if gameState = 1 then reset the snake
    IF gameState = 1 THEN
      SOUND(400,16384,300)
      lives = lives - 1
      IF lives <= 0 THEN
        gameState = -1
      ELSE
        FOR i = 0 TO maxLength-1
          xCords[i]=-1
          yCords[i]=-1
        NEXT i
        nextX = GETCOLUMNS()/2
        nextY = GETROWS()/2
        xCords[0] = nextX
        yCords[0] = nextY
        xCords[1] = nextX
        yCords[1] = nextY + 1
        xCords[2] = nextX
        yCords[2] = nextY + 2
        currentDir = UP
        gameState = 0
      ENDIF
    ENDIF

    IF lives > 0 THEN

      REM draw the snake
      FOR i = 0 TO maxLength-1
        IF xCords[i] >= 0 THEN
          CURSORXY(xCords[i],yCords[i])
          IF i%2 THEN
            PRINTG(@SOLIDFILL,@LIGHT_GREEN)
          ELSE
            PRINTG(@SOLIDFILL,@GREEN)
          ENDIF
        ENDIF
      NEXT i

      IF currentDir = UP THEN
        CURSORXY(nextX,nextY)
        PRINTG(HeadUDGlyph,@GREEN,@BROWN,@VERTICAL)
      ELSEIF currentDir = DOWN THEN
        CURSORXY(nextX,nextY)
        PRINTG(HeadUDGlyph,@GREEN,@BROWN,)
      ELSEIF currentDir = LEFT THEN
        CURSORXY(nextX,nextY)
        PRINTG(HeadLRGlyph,@GREEN,@BROWN,@HORIZONTAL)
      ELSEIF currentDir = RIGHT THEN
        CURSORXY(nextX,nextY)
        PRINTG(HeadLRGlyph,@GREEN,@BROWN)
      ENDIF

      REM draw the lives
      FOR i = 1 TO lives
        CURSORXY((GETCOLUMNS()-(lives+2))+i,0)
        PRINTG(@HEART,@MAGENTA,@RED)
      NEXT i

      REM PRINT the score
      CURSORXY(4,0)
      PRINTG(@ALIEN1,@BLUE,@RED)
      PRINT(" "+score,@BLUE,@RED)
    ENDIF
    YEILD(difficulty)
    BLIT
  WEND
  YEILD()
  BLIT
WEND
END